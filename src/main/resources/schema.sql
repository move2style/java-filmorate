<<<<<<< HEAD
create table if not exists USERS
(
    id int not null primary key AUTO_INCREMENT,
    email varchar(255) not null,
    login varchar(255) not null,
    name varchar(255),
    birthday date
);

create table if not exists MPA
(
    id int not null primary key AUTO_INCREMENT,
    name varchar(255)
);

create table if not exists FILMS
(
    id int not null primary key AUTO_INCREMENT,
    name varchar(255),
    description varchar(255),
    duration int,
    release_date date,
    mpa_id int references MPA (id)
);

create table if not exists FRIENDS
(
    user_id int not null references USERS (id),
    friend_id int not null references USERS (id),
    status BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (user_id, friend_id),
    UNIQUE (user_id, friend_id)
);

create table if not exists GENRE
(
    id int not null primary key AUTO_INCREMENT,
    name varchar(255)
);

create table if not exists FILM_GENRE
(
    id_film int not null references FILMS (id),
    id_genre int not null references GENRE (id),
    PRIMARY KEY (id_film, id_genre)
);

create table if not exists LIKES
(
    id_film int not null references FILMS (id),
    user_id int not null references USERS (id),
    PRIMARY KEY (id_film, user_id)
);
=======
CREATE TABLE IF NOT EXISTS genre(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS mpa(
    mpa_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200) NOT NULL UNIQUE
);

--я решил все таки вернуть, потому что уж слишком сложные sql запросы тогда получаются
CREATE TABLE IF NOT EXISTS friendship_status(
    friendship_status_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200) NOT NULL UNIQUE
);



CREATE TABLE IF NOT EXISTS film(
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    release_date DATE,
    duration INTEGER,
    mpa_id INTEGER REFERENCES mpa(mpa_id) NOT NULL
); 

CREATE TABLE IF NOT EXISTS film_genre (
    film_id INTEGER REFERENCES film(film_id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genre(genre_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);


CREATE TABLE IF NOT EXISTS users(
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login VARCHAR(50) NOT NULL,
    name VARCHAR(50),
    email VARCHAR(200),
    birthday DATE
); 

CREATE TABLE IF NOT EXISTS friendship(
    requester_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    addressed_id  INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    status_id INTEGER REFERENCES friendship_status(friendship_status_id),
    PRIMARY KEY (requester_id, addressed_id)
); 

CREATE TABLE IF NOT EXISTS film_like(
    film_id INTEGER REFERENCES film(film_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);






>>>>>>> 97c2343 (скопирован мейн для группового занятия)
